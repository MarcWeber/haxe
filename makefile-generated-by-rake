# this makefile was created by Rakefile
# TODO: don't depend on libraries if backends are dropped
# you always have to enable BACKEND_neko
#
# important targets:
# haxe: creates haxe.native and haxe.bytecode
# haxe_clean: cleans haxe (has to be run if you enable disable backends,
# because timestamps don't change..

# BACKEND_X=yes: comment to disable backend
# BACKEND_swf=yes
BACKEND_neko=yes
# BACKEND_as3=yes
# BACKEND_cpp=yes
# BACKEND_cs=yes
# BACKEND_java=yes
# BACKEND_js=yes
# BACKEND_php=yes

# usage:
# 
# make haxe.native
# make haxe.bytecode
# make haxe (will build both)
# useful targets for libs:
# ========================
# make clean_LIB (LIB like swflib)
# make libs/swflib/swflib.cmxa
# make clean_libs
# checking out
# =========================
# make libs # gets libs
# make cppo # gets cppo/
# make derving # gets deriving
# # build deriving:
# make deriving/syntax/deriving
# # build cppo:
# make cppo/cppo
# info
# ============================
# libs/*: some Makefiles are no longer used. See LibMake usage in Rakefile
# state
# If you change backends you have to make haxe_clean, then recompile
clean_haxe:

	cd ./; rm *.cmx *.cmi *.cmo *.cma *.cmxa *.annot *.o *.a haxe.native haxe.bytecode

clean_all: clean_haxe clean_libs clean_graph


default: help


clean_libs: clean_extlib clean_extc clean_neko clean_javalib clean_ziplib clean_swflib clean_xml-light clean_ttflib


libs: 
	git clone git://github.com/HaxeFoundation/ocamllibs.git libs

cppo: 
	git clone https://github.com/mjambon/cppo.git cppo

cppo/cppo: cppo
	make -C cppo

clean_cppo: 
	make -C cppo clean

deriving: 
	git clone git://github.com/jaked/deriving.git deriving

deriving/syntax/deriving: deriving
	make -C deriving

clean_deriving: 
	make -C deriving clean

extunix: 
	curl 'https://forge.ocamlcore.org/frs/download.php/1146/ocaml-extunix-0.0.6.tar.gz' | tar xzf -
	mv ocaml-extunix-0.0.6 extunix

extunix/_build/src/extunix.cmxa: extunix
	cd extunix; ./configure && make

codegen.cmx: codegen.ml optimizer.cmx typeload.cmx typecore.cmx type.cmx genxml.cmx common.cmx ast.cmx libs/xml-light/xml-light.cmxa
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c codegen.ml

common.cmx: common.ml type.cmx ast.cmx libs/swflib/swflib.cmxa libs/javalib/java.cmxa libs/extc/extc.cmxa cppo/cppo
	ocamlopt -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c common.ml

dce.cmx: dce.ml ast.cmx common.cmx type.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c dce.ml

genas3.cmx: genas3.ml type.cmx common.cmx codegen.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genas3.ml

gencommon.cmx: gencommon.ml type.cmx common.cmx codegen.cmx ast.cmx cppo/cppo
	ocamlopt -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c gencommon.ml

gencpp.cmx: gencpp.ml type.cmx lexer.cmx common.cmx codegen.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c gencpp.ml

gencs.cmx: gencs.ml type.cmx lexer.cmx gencommon.cmx common.cmx codegen.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c gencs.ml

genjava.cmx: genjava.ml type.cmx gencommon.cmx common.cmx codegen.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genjava.ml

genjs.cmx: genjs.ml type.cmx optimizer.cmx lexer.cmx common.cmx codegen.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genjs.ml

genneko.cmx: genneko.ml type.cmx lexer.cmx common.cmx codegen.cmx ast.cmx libs/neko/neko.cmxa
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genneko.ml

genphp.cmx: genphp.ml type.cmx lexer.cmx common.cmx codegen.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genphp.ml

genswf.cmx: genswf.ml type.cmx $(if ${BACKEND_swf}, genswf9.cmx,) $(if ${BACKEND_swf}, genswf8.cmx,) common.cmx ast.cmx libs/ttflib/ttf.cmxa
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genswf.ml

genswf8.cmx: genswf8.ml type.cmx lexer.cmx common.cmx codegen.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genswf8.ml

genswf9.cmx: genswf9.ml type.cmx lexer.cmx $(if ${BACKEND_swf}, genswf8.cmx,) common.cmx codegen.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genswf9.ml

genxml.cmx: genxml.ml type.cmx lexer.cmx common.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genxml.ml

interp.cmx: interp.ml typecore.cmx type.cmx lexer.cmx $(if ${BACKEND_neko}, genneko.cmx,) common.cmx codegen.cmx ast.cmx $(if ${BACKEND_swf}, genswf.cmx,) parser.cmx cppo/cppo
	ocamlopt -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c interp.ml

matcher.cmx: matcher.ml optimizer.cmx codegen.cmx typecore.cmx type.cmx typer.cmx common.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c matcher.ml

main.cmx: main.ml dce.cmx matcher.cmx typer.cmx typeload.cmx typecore.cmx type.cmx parser.cmx optimizer.cmx lexer.cmx interp.cmx genxml.cmx $(if ${BACKEND_swf}, genswf.cmx,) $(if ${BACKEND_php}, genphp.cmx,) $(if ${BACKEND_neko}, genneko.cmx,) $(if ${BACKEND_js}, genjs.cmx,) $(if ${BACKEND_cpp}, gencpp.cmx,) $(if ${BACKEND_as3}, genas3.cmx,) common.cmx codegen.cmx ast.cmx gencommon.cmx $(if ${BACKEND_java}, genjava.cmx,) $(if ${BACKEND_cs}, gencs.cmx,) cppo/cppo
	ocamlopt -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c main.ml

optimizer.cmx: optimizer.ml typecore.cmx type.cmx parser.cmx common.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c optimizer.ml

parser.cmx: parser.ml lexer.cmx common.cmx ast.cmx
	ocamlopt -g -dtypes   -pp camlp4o -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c parser.ml

type.cmx: type.ml ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c type.ml

typecore.cmx: typecore.ml type.cmx common.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c typecore.ml

typeload.cmx: typeload.ml typecore.cmx type.cmx parser.cmx optimizer.cmx lexer.cmx common.cmx ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c typeload.ml

typer.cmx: typer.ml typeload.cmx typecore.cmx type.cmx parser.cmx optimizer.cmx lexer.cmx interp.cmx $(if ${BACKEND_neko}, genneko.cmx,) $(if ${BACKEND_js}, genjs.cmx,) common.cmx codegen.cmx ast.cmx cppo/cppo
	ocamlopt -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c typer.ml

lexer.cmx: lexer.ml ast.cmx
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c lexer.ml

ast.cmx: ast.ml libs/extlib/extLib.cmxa
	ocamlopt -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c ast.ml

clean_extlib:

	cd libs/extlib; rm *.cmx *.cmi *.cmo *.cma *.cmxa *.annot *.o *.a 

libs/extlib/enum.cmx: libs
	cd libs/extlib; ocamlopt   -c enum.mli
	cd libs/extlib; ocamlopt   -c enum.ml

libs/extlib/bitSet.cmx: libs libs/extlib/enum.cmx
	cd libs/extlib; ocamlopt   -c bitSet.mli
	cd libs/extlib; ocamlopt   -c bitSet.ml

libs/extlib/dynArray.cmx: libs libs/extlib/enum.cmx
	cd libs/extlib; ocamlopt   -c dynArray.mli
	cd libs/extlib; ocamlopt   -c dynArray.ml

libs/extlib/extArray.cmx: libs libs/extlib/enum.cmx libs/extlib/bitSet.cmx
	cd libs/extlib; ocamlopt   -c extArray.mli
	cd libs/extlib; ocamlopt   -c extArray.ml

libs/extlib/extHashtbl.cmx: libs libs/extlib/enum.cmx
	cd libs/extlib; ocamlopt   -c extHashtbl.mli
	cd libs/extlib; ocamlopt   -c extHashtbl.ml

libs/extlib/extList.cmx: libs libs/extlib/enum.cmx
	cd libs/extlib; ocamlopt   -c extList.mli
	cd libs/extlib; ocamlopt   -c extList.ml

libs/extlib/extString.cmx: libs libs/extlib/enum.cmx
	cd libs/extlib; ocamlopt   -c extString.mli
	cd libs/extlib; ocamlopt   -c extString.ml

libs/extlib/global.cmx: libs
	cd libs/extlib; ocamlopt   -c global.mli
	cd libs/extlib; ocamlopt   -c global.ml

libs/extlib/IO.cmx: libs libs/extlib/extString.cmx
	cd libs/extlib; ocamlopt   -c IO.mli
	cd libs/extlib; ocamlopt   -c IO.ml

libs/extlib/option.cmx: libs
	cd libs/extlib; ocamlopt   -c option.mli
	cd libs/extlib; ocamlopt   -c option.ml

libs/extlib/pMap.cmx: libs libs/extlib/enum.cmx
	cd libs/extlib; ocamlopt   -c pMap.mli
	cd libs/extlib; ocamlopt   -c pMap.ml

libs/extlib/std.cmx: libs libs/extlib/enum.cmx
	cd libs/extlib; ocamlopt   -c std.mli
	cd libs/extlib; ocamlopt   -c std.ml

libs/extlib/uChar.cmx: libs
	cd libs/extlib; ocamlopt   -c uChar.mli
	cd libs/extlib; ocamlopt   -c uChar.ml

libs/extlib/uTF8.cmx: libs libs/extlib/uChar.cmx
	cd libs/extlib; ocamlopt   -c uTF8.mli
	cd libs/extlib; ocamlopt   -c uTF8.ml

libs/extlib/base64.cmx: libs libs/extlib/IO.cmx
	cd libs/extlib; ocamlopt   -c base64.mli
	cd libs/extlib; ocamlopt   -c base64.ml

libs/extlib/unzip.cmx: libs libs/extlib/IO.cmx
	cd libs/extlib; ocamlopt   -c unzip.mli
	cd libs/extlib; ocamlopt   -c unzip.ml

libs/extlib/refList.cmx: libs libs/extlib/extList.cmx
	cd libs/extlib; ocamlopt   -c refList.mli
	cd libs/extlib; ocamlopt   -c refList.ml

libs/extlib/optParse.cmx: libs libs/extlib/extString.cmx libs/extlib/extList.cmx
	cd libs/extlib; ocamlopt   -c optParse.mli
	cd libs/extlib; ocamlopt   -c optParse.ml

libs/extlib/dllist.cmx: libs libs/extlib/enum.cmx
	cd libs/extlib; ocamlopt   -c dllist.mli
	cd libs/extlib; ocamlopt   -c dllist.ml

libs/extlib/multiArray.cmx: libs
	cd libs/extlib; ocamlopt   -c multiArray.mli
	cd libs/extlib; ocamlopt   -c multiArray.ml

libs/extlib/extLib.cmxa: libs/extlib/enum.cmx libs/extlib/bitSet.cmx libs/extlib/dynArray.cmx libs/extlib/extArray.cmx libs/extlib/extHashtbl.cmx libs/extlib/extList.cmx libs/extlib/extString.cmx libs/extlib/global.cmx libs/extlib/IO.cmx libs/extlib/option.cmx libs/extlib/pMap.cmx libs/extlib/std.cmx libs/extlib/uChar.cmx libs/extlib/uTF8.cmx libs/extlib/base64.cmx libs/extlib/unzip.cmx libs/extlib/refList.cmx libs/extlib/optParse.cmx libs/extlib/dllist.cmx libs/extlib/multiArray.cmx
	cd libs/extlib; ocamlopt -a -o extLib.cmxa enum.cmx bitSet.cmx dynArray.cmx extArray.cmx extHashtbl.cmx extList.cmx extString.cmx global.cmx IO.cmx option.cmx pMap.cmx std.cmx uChar.cmx uTF8.cmx base64.cmx unzip.cmx refList.cmx optParse.cmx dllist.cmx multiArray.cmx

compile_libs: libs/extlib/extLib.cma


extlib: libs/extlib/extLib.cma


clean_extc:

	cd libs/extc; rm *.cmx *.cmi *.cmo *.cma *.cmxa *.annot *.o *.a 

libs/extc/extc.cmx: libs libs/extlib/extLib.cmxa
	cd libs/extc; ocamlopt  -I ../extlib -c extc.ml

libs/extc/extc_stubs.o: libs libs/extlib/extLib.cmxa
	cd libs/extc; ocamlc -I zlib extc_stubs.c

libs/extc/extc.cmxa: libs/extc/extc.cmx libs/extc/extc_stubs.o
	cd libs/extc; ocamlopt -a -o extc.cmxa extc.cmx

compile_libs: libs/extc/extc.cma


extc: libs/extc/extc.cma


clean_neko:

	cd libs/neko; rm *.cmx *.cmi *.cmo *.cma *.cmxa *.annot *.o *.a 

libs/neko/nast.cmx: libs libs/extlib/extLib.cmxa
	cd libs/neko; ocamlopt  -I ../extlib -c nast.ml

libs/neko/nxml.cmx: libs libs/extlib/extLib.cmxa libs/neko/nast.cmx
	cd libs/neko; ocamlopt  -I ../extlib -c nxml.ml

libs/neko/binast.cmx: libs libs/extlib/extLib.cmxa libs/neko/nast.cmx
	cd libs/neko; ocamlopt  -I ../extlib -c binast.ml

libs/neko/nbytecode.cmx: libs libs/extlib/extLib.cmxa
	cd libs/neko; ocamlopt  -I ../extlib -c nbytecode.ml

libs/neko/ncompile.cmx: libs libs/extlib/extLib.cmxa libs/neko/nbytecode.cmx
	cd libs/neko; ocamlopt  -I ../extlib -c ncompile.ml

libs/neko/neko.cmxa: libs/neko/nast.cmx libs/neko/nxml.cmx libs/neko/binast.cmx libs/neko/nbytecode.cmx libs/neko/ncompile.cmx
	cd libs/neko; ocamlopt -a -o neko.cmxa nast.cmx nxml.cmx binast.cmx nbytecode.cmx ncompile.cmx

compile_libs: libs/neko/neko.cma


neko: libs/neko/neko.cma


clean_javalib: 
	make -C libs/javalib clean

libs/javalib/java.cmxa: libs libs/extlib/extLib.cmxa
	make -C libs/javalib native

compile_libs: libs/javalib/java.cma


javalib: libs/javalib/java.cma


clean_ziplib: 
	make -C libs/ziplib clean

libs/ziplib/zip.cmxa: libs libs/extc/extc.cmxa
	make -C libs/ziplib native

compile_libs: libs/ziplib/zip.cma


ziplib: libs/ziplib/zip.cma


clean_swflib: 
	make -C libs/swflib clean

libs/swflib/swflib.cmxa: libs libs/extlib/extLib.cmxa libs/extc/extc.cmxa
	make -C libs/swflib native

compile_libs: libs/swflib/swflib.cma


swflib: libs/swflib/swflib.cma


clean_xml-light: 
	make -C libs/xml-light clean

libs/xml-light/xml-light.cmxa: libs
	make -C libs/xml-light native

compile_libs: libs/xml-light/xml-light.cma


xml-light: libs/xml-light/xml-light.cma


clean_ttflib: 
	make -C libs/ttflib clean

libs/ttflib/ttf.cmxa: libs libs/swflib/swflib.cmxa libs/extlib/extLib.cmxa
	make -C libs/ttflib native

compile_libs: libs/ttflib/ttf.cma


ttflib: libs/ttflib/ttf.cma


haxe.native: libs/ ast.cmx type.cmx common.cmx dce.cmx typecore.cmx lexer.cmx parser.cmx optimizer.cmx typeload.cmx genxml.cmx codegen.cmx $(if ${BACKEND_neko}, genneko.cmx,) $(if ${BACKEND_swf}, genswf8.cmx,) $(if ${BACKEND_swf}, genswf9.cmx,) $(if ${BACKEND_swf}, genswf.cmx,) interp.cmx $(if ${BACKEND_js}, genjs.cmx,) typer.cmx matcher.cmx $(if ${BACKEND_php}, genphp.cmx,) $(if ${BACKEND_cpp}, gencpp.cmx,) $(if ${BACKEND_as3}, genas3.cmx,) gencommon.cmx $(if ${BACKEND_java}, genjava.cmx,) $(if ${BACKEND_cs}, gencs.cmx,) main.cmx libs/extc/extc.cmxa libs/ziplib/zip.cmxa libs/ttflib/ttf.cmxa
	ocamlopt -g  -cclib libs/extc/extc_stubs.o -cclib -lz unix.cmxa str.cmxa libs/extlib/extLib.cmxa libs/xml-light/xml-light.cmxa libs/swflib/swflib.cmxa libs/extc/extc.cmxa libs/neko/neko.cmxa libs/javalib/java.cmxa libs/ziplib/zip.cmxa libs/ttflib/ttf.cmxa -o haxe.native ast.cmx type.cmx common.cmx dce.cmx typecore.cmx lexer.cmx parser.cmx optimizer.cmx typeload.cmx genxml.cmx codegen.cmx $(if ${BACKEND_neko}, genneko.cmx,) $(if ${BACKEND_swf}, genswf8.cmx,) $(if ${BACKEND_swf}, genswf9.cmx,) $(if ${BACKEND_swf}, genswf.cmx,) interp.cmx $(if ${BACKEND_js}, genjs.cmx,) typer.cmx matcher.cmx $(if ${BACKEND_php}, genphp.cmx,) $(if ${BACKEND_cpp}, gencpp.cmx,) $(if ${BACKEND_as3}, genas3.cmx,) gencommon.cmx $(if ${BACKEND_java}, genjava.cmx,) $(if ${BACKEND_cs}, gencs.cmx,) main.cmx

codegen.cmo: codegen.ml optimizer.cmo typeload.cmo typecore.cmo type.cmo genxml.cmo common.cmo ast.cmo libs/xml-light/xml-light.cma
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c codegen.ml

common.cmo: common.ml type.cmo ast.cmo libs/swflib/swflib.cma libs/javalib/java.cma libs/extc/extc.cma cppo/cppo
	ocamlc -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c common.ml

dce.cmo: dce.ml ast.cmo common.cmo type.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c dce.ml

genas3.cmo: genas3.ml type.cmo common.cmo codegen.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genas3.ml

gencommon.cmo: gencommon.ml type.cmo common.cmo codegen.cmo ast.cmo cppo/cppo
	ocamlc -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c gencommon.ml

gencpp.cmo: gencpp.ml type.cmo lexer.cmo common.cmo codegen.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c gencpp.ml

gencs.cmo: gencs.ml type.cmo lexer.cmo gencommon.cmo common.cmo codegen.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c gencs.ml

genjava.cmo: genjava.ml type.cmo gencommon.cmo common.cmo codegen.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genjava.ml

genjs.cmo: genjs.ml type.cmo optimizer.cmo lexer.cmo common.cmo codegen.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genjs.ml

genneko.cmo: genneko.ml type.cmo lexer.cmo common.cmo codegen.cmo ast.cmo libs/neko/neko.cma
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genneko.ml

genphp.cmo: genphp.ml type.cmo lexer.cmo common.cmo codegen.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genphp.ml

genswf.cmo: genswf.ml type.cmo $(if ${BACKEND_swf}, genswf9.cmo,) $(if ${BACKEND_swf}, genswf8.cmo,) common.cmo ast.cmo libs/ttflib/ttf.cma
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genswf.ml

genswf8.cmo: genswf8.ml type.cmo lexer.cmo common.cmo codegen.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genswf8.ml

genswf9.cmo: genswf9.ml type.cmo lexer.cmo $(if ${BACKEND_swf}, genswf8.cmo,) common.cmo codegen.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genswf9.ml

genxml.cmo: genxml.ml type.cmo lexer.cmo common.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c genxml.ml

interp.cmo: interp.ml typecore.cmo type.cmo lexer.cmo $(if ${BACKEND_neko}, genneko.cmo,) common.cmo codegen.cmo ast.cmo $(if ${BACKEND_swf}, genswf.cmo,) parser.cmo cppo/cppo
	ocamlc -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c interp.ml

matcher.cmo: matcher.ml optimizer.cmo codegen.cmo typecore.cmo type.cmo typer.cmo common.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c matcher.ml

main.cmo: main.ml dce.cmo matcher.cmo typer.cmo typeload.cmo typecore.cmo type.cmo parser.cmo optimizer.cmo lexer.cmo interp.cmo genxml.cmo $(if ${BACKEND_swf}, genswf.cmo,) $(if ${BACKEND_php}, genphp.cmo,) $(if ${BACKEND_neko}, genneko.cmo,) $(if ${BACKEND_js}, genjs.cmo,) $(if ${BACKEND_cpp}, gencpp.cmo,) $(if ${BACKEND_as3}, genas3.cmo,) common.cmo codegen.cmo ast.cmo gencommon.cmo $(if ${BACKEND_java}, genjava.cmo,) $(if ${BACKEND_cs}, gencs.cmo,) cppo/cppo
	ocamlc -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c main.ml

optimizer.cmo: optimizer.ml typecore.cmo type.cmo parser.cmo common.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c optimizer.ml

parser.cmo: parser.ml lexer.cmo common.cmo ast.cmo
	ocamlc -g -dtypes   -pp camlp4o -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c parser.ml

type.cmo: type.ml ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c type.ml

typecore.cmo: typecore.ml type.cmo common.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c typecore.ml

typeload.cmo: typeload.ml typecore.cmo type.cmo parser.cmo optimizer.cmo lexer.cmo common.cmo ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c typeload.ml

typer.cmo: typer.ml typeload.cmo typecore.cmo type.cmo parser.cmo optimizer.cmo lexer.cmo interp.cmo $(if ${BACKEND_neko}, genneko.cmo,) $(if ${BACKEND_js}, genjs.cmo,) common.cmo codegen.cmo ast.cmo cppo/cppo
	ocamlc -g -dtypes -pp "cppo/cppo $(if ${BACKEND_swf}, -D BACKEND_swf,) $(if ${BACKEND_neko}, -D BACKEND_neko,) $(if ${BACKEND_as3}, -D BACKEND_as3,) $(if ${BACKEND_cpp}, -D BACKEND_cpp,) $(if ${BACKEND_cs}, -D BACKEND_cs,) $(if ${BACKEND_java}, -D BACKEND_java,) $(if ${BACKEND_js}, -D BACKEND_js,) $(if ${BACKEND_php}, -D BACKEND_php,)"   -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c typer.ml

lexer.cmo: lexer.ml ast.cmo
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c lexer.ml

ast.cmo: ast.ml libs/extlib/extLib.cma
	ocamlc -g -dtypes    -I libs/extlib -I libs/extc -I libs/neko -I libs/javalib -I libs/ziplib -I libs/swflib -I libs/xml-light -I libs/ttflib  -c ast.ml

libs/extlib/enum.cmo: libs
	cd libs/extlib; ocamlc   -c enum.mli
	cd libs/extlib; ocamlc   -c enum.ml

libs/extlib/bitSet.cmo: libs libs/extlib/enum.cmo
	cd libs/extlib; ocamlc   -c bitSet.mli
	cd libs/extlib; ocamlc   -c bitSet.ml

libs/extlib/dynArray.cmo: libs libs/extlib/enum.cmo
	cd libs/extlib; ocamlc   -c dynArray.mli
	cd libs/extlib; ocamlc   -c dynArray.ml

libs/extlib/extArray.cmo: libs libs/extlib/enum.cmo libs/extlib/bitSet.cmo
	cd libs/extlib; ocamlc   -c extArray.mli
	cd libs/extlib; ocamlc   -c extArray.ml

libs/extlib/extHashtbl.cmo: libs libs/extlib/enum.cmo
	cd libs/extlib; ocamlc   -c extHashtbl.mli
	cd libs/extlib; ocamlc   -c extHashtbl.ml

libs/extlib/extList.cmo: libs libs/extlib/enum.cmo
	cd libs/extlib; ocamlc   -c extList.mli
	cd libs/extlib; ocamlc   -c extList.ml

libs/extlib/extString.cmo: libs libs/extlib/enum.cmo
	cd libs/extlib; ocamlc   -c extString.mli
	cd libs/extlib; ocamlc   -c extString.ml

libs/extlib/global.cmo: libs
	cd libs/extlib; ocamlc   -c global.mli
	cd libs/extlib; ocamlc   -c global.ml

libs/extlib/IO.cmo: libs libs/extlib/extString.cmo
	cd libs/extlib; ocamlc   -c IO.mli
	cd libs/extlib; ocamlc   -c IO.ml

libs/extlib/option.cmo: libs
	cd libs/extlib; ocamlc   -c option.mli
	cd libs/extlib; ocamlc   -c option.ml

libs/extlib/pMap.cmo: libs libs/extlib/enum.cmo
	cd libs/extlib; ocamlc   -c pMap.mli
	cd libs/extlib; ocamlc   -c pMap.ml

libs/extlib/std.cmo: libs libs/extlib/enum.cmo
	cd libs/extlib; ocamlc   -c std.mli
	cd libs/extlib; ocamlc   -c std.ml

libs/extlib/uChar.cmo: libs
	cd libs/extlib; ocamlc   -c uChar.mli
	cd libs/extlib; ocamlc   -c uChar.ml

libs/extlib/uTF8.cmo: libs libs/extlib/uChar.cmo
	cd libs/extlib; ocamlc   -c uTF8.mli
	cd libs/extlib; ocamlc   -c uTF8.ml

libs/extlib/base64.cmo: libs libs/extlib/IO.cmo
	cd libs/extlib; ocamlc   -c base64.mli
	cd libs/extlib; ocamlc   -c base64.ml

libs/extlib/unzip.cmo: libs libs/extlib/IO.cmo
	cd libs/extlib; ocamlc   -c unzip.mli
	cd libs/extlib; ocamlc   -c unzip.ml

libs/extlib/refList.cmo: libs libs/extlib/extList.cmo
	cd libs/extlib; ocamlc   -c refList.mli
	cd libs/extlib; ocamlc   -c refList.ml

libs/extlib/optParse.cmo: libs libs/extlib/extString.cmo libs/extlib/extList.cmo
	cd libs/extlib; ocamlc   -c optParse.mli
	cd libs/extlib; ocamlc   -c optParse.ml

libs/extlib/dllist.cmo: libs libs/extlib/enum.cmo
	cd libs/extlib; ocamlc   -c dllist.mli
	cd libs/extlib; ocamlc   -c dllist.ml

libs/extlib/multiArray.cmo: libs
	cd libs/extlib; ocamlc   -c multiArray.mli
	cd libs/extlib; ocamlc   -c multiArray.ml

libs/extlib/extLib.cma: libs/extlib/enum.cmo libs/extlib/bitSet.cmo libs/extlib/dynArray.cmo libs/extlib/extArray.cmo libs/extlib/extHashtbl.cmo libs/extlib/extList.cmo libs/extlib/extString.cmo libs/extlib/global.cmo libs/extlib/IO.cmo libs/extlib/option.cmo libs/extlib/pMap.cmo libs/extlib/std.cmo libs/extlib/uChar.cmo libs/extlib/uTF8.cmo libs/extlib/base64.cmo libs/extlib/unzip.cmo libs/extlib/refList.cmo libs/extlib/optParse.cmo libs/extlib/dllist.cmo libs/extlib/multiArray.cmo
	cd libs/extlib; ocamlc -a -o extLib.cma enum.cmo bitSet.cmo dynArray.cmo extArray.cmo extHashtbl.cmo extList.cmo extString.cmo global.cmo IO.cmo option.cmo pMap.cmo std.cmo uChar.cmo uTF8.cmo base64.cmo unzip.cmo refList.cmo optParse.cmo dllist.cmo multiArray.cmo

libs/extc/extc.cmo: libs libs/extlib/extLib.cma
	cd libs/extc; ocamlc  -I ../extlib -c extc.ml

libs/extc/extc_stubs.o: libs libs/extlib/extLib.cma
	cd libs/extc; ocamlc -I zlib extc_stubs.c

libs/extc/extc.cma: libs/extc/extc.cmo libs/extc/extc_stubs.o
	cd libs/extc; ocamlc -a -o extc.cma extc.cmo

libs/neko/nast.cmo: libs libs/extlib/extLib.cma
	cd libs/neko; ocamlc  -I ../extlib -c nast.ml

libs/neko/nxml.cmo: libs libs/extlib/extLib.cma libs/neko/nast.cmo
	cd libs/neko; ocamlc  -I ../extlib -c nxml.ml

libs/neko/binast.cmo: libs libs/extlib/extLib.cma libs/neko/nast.cmo
	cd libs/neko; ocamlc  -I ../extlib -c binast.ml

libs/neko/nbytecode.cmo: libs libs/extlib/extLib.cma
	cd libs/neko; ocamlc  -I ../extlib -c nbytecode.ml

libs/neko/ncompile.cmo: libs libs/extlib/extLib.cma libs/neko/nbytecode.cmo
	cd libs/neko; ocamlc  -I ../extlib -c ncompile.ml

libs/neko/neko.cma: libs/neko/nast.cmo libs/neko/nxml.cmo libs/neko/binast.cmo libs/neko/nbytecode.cmo libs/neko/ncompile.cmo
	cd libs/neko; ocamlc -a -o neko.cma nast.cmo nxml.cmo binast.cmo nbytecode.cmo ncompile.cmo

libs/javalib/java.cma: libs libs/extlib/extLib.cma
	make -C libs/javalib bytecode

libs/ziplib/zip.cma: libs libs/extc/extc.cma
	make -C libs/ziplib bytecode

libs/swflib/swflib.cma: libs libs/extlib/extLib.cma libs/extc/extc.cma
	make -C libs/swflib bytecode

libs/xml-light/xml-light.cma: libs
	make -C libs/xml-light bytecode

libs/ttflib/ttf.cma: libs libs/swflib/swflib.cma libs/extlib/extLib.cma
	make -C libs/ttflib bytecode

haxe.bytecode: libs/ ast.cmo type.cmo common.cmo dce.cmo typecore.cmo lexer.cmo parser.cmo optimizer.cmo typeload.cmo genxml.cmo codegen.cmo $(if ${BACKEND_neko}, genneko.cmo,) $(if ${BACKEND_swf}, genswf8.cmo,) $(if ${BACKEND_swf}, genswf9.cmo,) $(if ${BACKEND_swf}, genswf.cmo,) interp.cmo $(if ${BACKEND_js}, genjs.cmo,) typer.cmo matcher.cmo $(if ${BACKEND_php}, genphp.cmo,) $(if ${BACKEND_cpp}, gencpp.cmo,) $(if ${BACKEND_as3}, genas3.cmo,) gencommon.cmo $(if ${BACKEND_java}, genjava.cmo,) $(if ${BACKEND_cs}, gencs.cmo,) main.cmo libs/extc/extc.cma libs/ziplib/zip.cma libs/ttflib/ttf.cma
	ocamlc -g -custom -cclib libs/extc/extc_stubs.o -cclib -lz unix.cma str.cma libs/extlib/extLib.cma libs/xml-light/xml-light.cma libs/swflib/swflib.cma libs/extc/extc.cma libs/neko/neko.cma libs/javalib/java.cma libs/ziplib/zip.cma libs/ttflib/ttf.cma -o haxe.bytecode ast.cmo type.cmo common.cmo dce.cmo typecore.cmo lexer.cmo parser.cmo optimizer.cmo typeload.cmo genxml.cmo codegen.cmo $(if ${BACKEND_neko}, genneko.cmo,) $(if ${BACKEND_swf}, genswf8.cmo,) $(if ${BACKEND_swf}, genswf9.cmo,) $(if ${BACKEND_swf}, genswf.cmo,) interp.cmo $(if ${BACKEND_js}, genjs.cmo,) typer.cmo matcher.cmo $(if ${BACKEND_php}, genphp.cmo,) $(if ${BACKEND_cpp}, gencpp.cmo,) $(if ${BACKEND_as3}, genas3.cmo,) gencommon.cmo $(if ${BACKEND_java}, genjava.cmo,) $(if ${BACKEND_cs}, gencs.cmo,) main.cmo

haxe: haxe.native haxe.bytecode

